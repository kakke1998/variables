variable "aws_region" {
  type = string
}

variable "aws_access_key_id" {
  type = string
}

variable "aws_secret_access_key" {
  type = string
}

# VPC and Subnets (Replace with your existing VPC)
data "aws_vpc" "main" {
  id = var.aws_default_vpc_id
}

data "aws_subnet" "public" {
  count = 2

  filter {
    name = "tag:Name"
    values = ["public-${count.index}"]
  }

  depends_on = [aws_vpc.main]
}

# ECS Cluster
resource "aws_ecs_cluster" "app" {
  name = "hello-world-cluster"
}

# ECR Repository
resource "aws_ecr_repository" "app_image" {
  name = "hello-world-app"
}

# Fargate Task Definition
resource "aws_ecs_task_definition" "app_task" {
  family = "hello-world-task-definition"

  cpu = "256"
  memory = "512"

  network_mode = "awsvpc"

  requires_compatibilities = ["FARGATE"]

  container_definitions = <<EOF
[
  {
    "name": "hello-world-app",
    "image": "${aws_ecr_repository.app_image.arn}:latest",
    "portMappings": [
      {
        "containerPort": 80,
        "hostPort": 80
      }
    ],
    "essential": true
  }
]
EOF

  depends_on = [aws_ecr_repository.app_image]
}

# ECS Service
resource "aws_ecs_service" "app" {
  name = "hello-world-service"

  cluster = aws_ecs_cluster.app.arn
  launch_type = "FARGATE"
  task_definition = aws_ecs_task_definition.app_task.arn
  network_configuration {
    subnets = data.aws_subnet.public.*.id
    security_groups = ["sg-a1b2c3d4"]  # Replace with your security group ID
  }
  desired_count = 1
  min_scaling_capacity = 1
  max_scaling_capacity = 1
}


variable "aws_region" {
  default = "us-east-1"
}

variable "aws_access_key_id" {}
variable "aws_secret_access_key" {}


FROM node:16-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

CMD [ "node", "app.js" ]


const http = require('http');

const port = process.env.PORT || 80;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World!\n');
});

server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
